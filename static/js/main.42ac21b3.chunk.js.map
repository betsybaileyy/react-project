{"version":3,"sources":["components/Title.js","components/DogSpace.js","components/DogList.js","components/Footer.js","components/About.js","components/DogDetails.js","components/App.js","components/serviceWorker.js","index.js"],"names":["Title","className","activeClassName","exact","to","DogSpace","props","name","image","address","hours","id","src","process","width","height","alt","DogList","spaces","data","map","i","title","breed","images","desc","key","Footer","About","DogDetails","match","params","friend","App","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4/CA8BeA,MA1Bf,WACE,OACE,yBAAKC,UAAU,SACb,gCACE,sDACA,yBAAKA,UAAU,kBAAf,gCAEA,6BACA,kBAAC,IAAD,CACEA,UAAU,WACVC,gBAAgB,kBAChBC,OAAK,EACLC,GAAG,KAJL,QAMA,kBAAC,IAAD,CACEH,UAAU,WACVC,gBAAgB,kBAChBE,GAAG,UAHL,a,MCEOC,MAhBf,SAAkBC,GAAQ,IAChBC,EAAoCD,EAApCC,KAAMC,EAA8BF,EAA9BE,MAAOC,EAAuBH,EAAvBG,QAASC,EAAcJ,EAAdI,MAAOC,EAAOL,EAAPK,GACrC,OACE,yBAAKV,UAAU,YACnB,kBAAC,IAAD,CAAMG,GAAE,mBAAcO,IACpB,yBAAKC,IAAG,UAAKC,iBAAL,kBAAqCL,GAASM,MAAM,MAAMC,OAAO,MAAMC,IAAI,WAErF,kBAAC,IAAD,CAAMZ,GAAE,mBAAcO,IACpB,4BAAKJ,IAED,6BAAME,GACN,6BAAMC,K,eCsDGO,MAhEf,WAEE,IAAMC,EAASC,EAAKC,KAAI,WAAkCC,GAAQ,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,KAEhD,OACE,kBAAC,EAAD,CACEd,GAAIU,EACJK,IAAKJ,EACLf,KAAMe,EACNC,MAAOA,EACPf,MAAOgB,EAAO,GACdC,KAAMA,OAKZ,OACE,yBAAKxB,UAAU,WACXiB,I,MCZOS,MARf,WACE,OACE,yBAAK1B,UAAU,UACb,qFCKS2B,MATf,WACE,OACE,6BACE,yDACA,iGCqBSC,MAvBf,SAAoBvB,GAAQ,IAClBK,EAAOL,EAAMwB,MAAMC,OAAnBpB,GADiB,EAEuBQ,EAAKR,GAA7Ca,EAFiB,EAEjBA,OAAQF,EAFS,EAETA,MAAOG,EAFE,EAEFA,KAAMF,EAFJ,EAEIA,MAAOS,EAFX,EAEWA,OAEpC,OACE,6BACE,6BACE,yBAAKpB,IAAG,UAAKC,iBAAL,kBAAqCW,EAAO,OAGtD,6BACE,4BAAMF,GACN,2BAAKC,GACL,2BAAKE,GAEL,2BAAKO,MCqBEC,MA9Bf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKhC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOE,OAAK,EAAC+B,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,SAASC,UAAWP,IAChC,kBAAC,IAAD,CAAOM,KAAK,eAAeC,UAAWN,IAOtC,kBAAC,EAAD,SCZcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCZNU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.42ac21b3.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom'\nimport React from 'react'\nimport './Title.css';\n\nfunction Title() {\n  return (\n    <div className=\"Title\">\n      <header>\n        <h1>Famous Dogs in My Life</h1>\n        <div className=\"Title-Subtitle\">My Dogs and my Friend's Dogs</div>\n\n        <div>\n        <NavLink\n          className=\"nav-link\"\n          activeClassName=\"nav-link-active\"\n          exact\n          to=\"/\">List</NavLink>\n\n        <NavLink\n          className=\"nav-link\"\n          activeClassName=\"nav-link-active\"\n          to=\"/about\">About</NavLink>\n          \n        </div>\n\n      </header>\n    </div>\n  )\n}\n\nexport default Title","import { Link } from 'react-router-dom'\nimport React from 'react'\nimport './DogSpace.css';\n\nfunction DogSpace(props) {\n  const { name, image, address, hours, id } = props\n  return (\n    <div className=\"DogSpace\">\n<Link to={`/details/${id}`}>\n  <img src={`${process.env.PUBLIC_URL}images/${image}`} width=\"300\" height=\"300\" alt=\"Hello\" />\n</Link>      \n<Link to={`/details/${id}`}>\n  <h1>{name}</h1>\n</Link>\n      <div>{address}</div>\n      <div>{hours}</div>\n    </div>\n  )\n}\n\nexport default DogSpace","import React from 'react';\nimport DogSpace from './DogSpace';\nimport './DogList.css';\nimport data from './dogs.json'\n\nfunction DogList() {\n\n  const spaces = data.map(( { title, breed, images, desc }, i ) => {\n  \n    return (\n      <DogSpace\n        id={i}\n        key={title} \n        name={title}\n        breed={breed}\n        image={images[0]}\n        desc={desc}\n      />\n    )\n  })\n\n  return (\n    <div className=\"DogList\">\n      { spaces }\n    </div>\n  )\n}\n// const titles = data.map((obj) => {\n//   return <h1>{obj.title}</h1>\n// })\n\n// function DogList() {\n//   return (\n//     <div className=\"DogList\">\n//         { titles }\n//       <DogSpace \n//               name=\"50 California Street\"\n//               address=\"50 California St.\"\n//               image=\"blue.jpg\"\n//       />\n//       <DogSpace \n//               name=\"50 California Street\"\n//               address=\"50 California St.\"\n//               image=\"blue.jpg\"\n//       />\n//             <DogSpace \n//         name=\"50 California Street\"\n//         address=\"50 California St.\"\n//         image=\"blue.jpg\"\n//       />\n//       <DogSpace \n//               name=\"50 California Street\"\n//               address=\"50 California St.\"\n//               image=\"blue.jpg\"\n//       />\n//       <DogSpace \n//               name=\"50 California Street\"\n//               address=\"50 California St.\"\n//               image=\"blue.jpg\"\n//       />\n//     </div>\n//   )\n// }\n// const titles = data.map((obj) => {\n//   return obj.title\n// })\n\n// console.log(titles)\n\nexport default DogList","import React from 'react'\nimport './Footer.css';\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      <h2>\"Be the person your dog thinks you are\" -C.J. Frick</h2>\n    </div>\n  )\n}\n\nexport default Footer","import React from 'react'\n\nfunction About() {\n  return (\n    <div>\n      <h1>What Makes Dogs So Great?</h1>\n      <p>These loyal companions make our lives so much richer and fuller!</p>\n    </div>\n  )\n}\n\nexport default About","import React from 'react'\n\nimport data from './dogs.json'\n\nfunction DogDetails(props) {\n  const { id } = props.match.params // Location index\n  const { images, title, desc, breed, friend  } = data[id]\n\n  return (\n    <div>\n      <div>\n        <img src={`${process.env.PUBLIC_URL}images/${images[0]}`} />\n      </div>\n\n      <div>\n        <h1>{ title }</h1>\n        <p>{ breed }</p>\n        <p>{ desc }</p>\n  \n        <p>{ friend }</p>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default DogDetails","import { HashRouter as Router, Route } from 'react-router-dom'\nimport React from 'react';\nimport './App.css';\nimport Title from '../components/Title';\nimport DogList from '../components/DogList';\nimport DogSpace from '../components/DogSpace';\nimport Footer from '../components/Footer.js';\nimport About from './About'\nimport DogDetails from '../components/DogDetails'\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Title />\n      <Route exact path=\"/\" component={DogList}/>\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/details/:id\" component={DogDetails} />\n\n      {/* <DogList />\n      <DogSpace />\n      <DogSpace />\n      <DogSpace />\n      <DogSpace /> */}\n      <Footer />\n    </div>\n    </Router>\n  );\n}\n// function DogSpace() {\n//   return (\n//     <div>\n//       <DogSpace />\n//       <DogSpace />\n//       <DogSpace />\n//       <DogSpace />\n//     </div>\n//   )\n// }\n\nexport default App;\n\n\n\n\n// function Heading() {\n//   // return <h1>Hello World</h1>\n//   const str = 'Foo Bar'\n//   return <h1>{str}</h1>\n// }\n// <header className=\"App-header\">\n// <Heading />\n// {/* <h2>foo bar</h2> */}\n// <img src={logo} className=\"App-logo\" alt=\"logo\" />\n// <p>\n//   Edit <code>src/App.js</code> and save to reload.\n// </p>\n// <a\n//   className=\"App-link\"\n//   href=\"https://reactjs.org\"\n//   target=\"_blank\"\n//   rel=\"noopener noreferrer\"\n// >\n//   Learn React\n// </a>\n// </header>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './components/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}